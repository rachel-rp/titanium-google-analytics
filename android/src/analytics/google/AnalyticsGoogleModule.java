/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package analytics.google;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;

import android.app.Activity;
import android.util.Log;

import com.google.android.gms.analytics.ExceptionParser;
import com.google.android.gms.analytics.ExceptionReporter;
import com.google.android.gms.analytics.GoogleAnalytics;
import com.google.android.gms.analytics.Tracker;


@Kroll.module(name="AnalyticsGoogle", id="analytics.google")
public class AnalyticsGoogleModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "GoogleAnalyticsModule";
	private static final boolean DBG = TiConfig.LOGD;

	private final GoogleAnalytics mInstance;
	private Tracker tracker;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public AnalyticsGoogleModule()
	{
		super();

		TiApplication appContext = TiApplication.getInstance();
		Activity activity = appContext.getCurrentActivity();
		mInstance = GoogleAnalytics.getInstance(activity);
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		 Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}

	// Methods
	@Kroll.method
	public TrackerProxy getTracker(String trackingID)
	{
		tracker = mInstance.newTracker(trackingID);
		return new TrackerProxy(tracker);
	}
    
    @Kroll.method
    public void dispatch()
    {
        mInstance.dispatchLocalHits();
    }

	@Kroll.setProperty
	public void setDispatchInterval(int interval)
	{
        mInstance.setLocalDispatchPeriod(interval);
	}

	@Kroll.setProperty
	public void setOptOut(boolean optOut)
	{
		mInstance.setAppOptOut(optOut);
	}

	@Kroll.setProperty
	public void setDryRun(boolean debug)
	{
		mInstance.setDryRun(debug);
	}

	@Kroll.setProperty
	public void setTrackUncaughtExceptions(boolean track) {
		if (track && tracker != null) {
			ExceptionReporter reporter = new ExceptionReporter(tracker, Thread.getDefaultUncaughtExceptionHandler(), TiApplication.getInstance().getCurrentActivity());
			reporter.setExceptionParser(new ExceptionParser()
			{
				@Override
				public String getDescription(String thread, Throwable throwable)
				{
					return String.format("Thread: %s, Exception: %s", thread, Log.getStackTraceString(throwable));
				}
			});

			Thread.setDefaultUncaughtExceptionHandler(reporter);
		}
	}

}
